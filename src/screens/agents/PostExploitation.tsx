import React, { useCallback, useEffect, useMemo, useRef, useState } from 'react'
import { createColumns, TableTypes, CenteredCard, Form, createFields } from 'material-crud'
import { useNavigator } from 'material-navigator'
import { useSnackbar } from 'notistack'
import CustomTable from '../../components/Table/CustomTable'
import { useSocket } from '../../util/SocketContext'
import { Collapse, Typography } from '@material-ui/core'
import { renderType } from '../../components/FullCrud'
import * as Yup from 'yup'
import { RefType } from '../../components/ZTerminal'

interface Description {
  default_value: string
  description: string
  example: string
  name: string
  required: boolean
  type: string
}

interface DataProps {
  name: string
  description: string
  id_module: number
  options_description: Description[]
}

type Props = { terminal: RefType | null }
const PostExploitation = (props: Props) => {
  const { terminal } = props
  const listRef = useRef(false)
  const { send, onError, onMessage } = useSocket()
  const { setLoading } = useNavigator()
  const { enqueueSnackbar } = useSnackbar()

  const [rowSelected, setRowSelected] = useState<DataProps | undefined>(undefined)
  const [data, setData] = useState<DataProps[]>([])
  const columns = useMemo(
    () =>
      createColumns([
        { id: 'id_module', title: 'ID', type: TableTypes.String, width: 2 },
        { id: 'name', title: 'Name', type: TableTypes.String, width: 3 },
        { id: 'description', title: 'Description', type: TableTypes.String, width: 4 },
      ]),
    [],
  )
  const fields = useMemo(() => {
    if (!rowSelected || !rowSelected.options_description.length) return []
    else {
      const maped = rowSelected.options_description.map(
        ({ default_value, description, example, name, required, type }) => ({
          id: name,
          title: name,
          type: renderType(type),
          help: description ? (
            <React.Fragment>
              <Typography color="inherit">{description}</Typography>
              {example && <em>Example: {example}</em>}
            </React.Fragment>
          ) : (
            ''
          ),
          validate: required ? Yup.string().required('Required') : undefined,
          defaultValue: default_value,
        }),
      )
      const finalArray: any[] = []
      maped.forEach((item, index) => {
        let toAdd = null
        if ((index + 1) % 2 === 0) toAdd = [maped[index - 1], item]
        else if (index === maped.length - 1) toAdd = [item]
        if (toAdd) finalArray.push(toAdd)
      })
      return createFields(finalArray)
    }
  }, [rowSelected])

  const handleSocket = useCallback(
    (
      typeAction: 'list' | 'execute',
      data?: { id_module: number; options?: { target: string; ports: string } },
    ) => {
      onMessage(async (e) => {
        const { type, reference, header, content, content_url } = JSON.parse(e.data || '{}')
        console.log(JSON.parse(e.data || '{}'))
        if (type === 'task.created') {
          setLoading(true, 'bottomRight')
          switch (typeAction) {
            case 'list':
              send({ type: 'post_exploitation.available', reference })
              break
            case 'execute':
              send({ type: 'post_exploitation.execute', reference, ...data })
              break
            default:
              break
          }
        } else if (content || content_url) {
          setLoading(false)
          switch (type) {
            case 'post_exploitation.available.result':
              setData(content)
              break
            case 'post_exploitation.execute.result.ok':
              if (!content_url && content) {
                enqueueSnackbar(content, { variant: 'success' })
              }
              break
            case 'post_exploitation.execute.result.shell': {
              enqueueSnackbar(`${header} completed`, { variant: 'success' })

              if (header === 'screenshot') {
                terminal?.writeImg(content_url)
                break
              }

              if (header === 'portScan') {
                terminal?.writeConsole(`> ${header}`)
                const firstString = content.substring(0, content.indexOf('-'))
                const secondString = content.substring(
                  content.indexOf('-'),
                  content.lastIndexOf('-') + 1,
                )
                const thirdString = content.substring(content.lastIndexOf('-') + 2)
                terminal?.writeConsole(firstString)
                terminal?.writeConsole(secondString)
                terminal?.writeConsole(thirdString)
              }
              break
            }
            case 'post_exploitation.execute.result.error':
              enqueueSnackbar(content, { variant: 'error' })
              break
            default:
              break
          }
        }
      })
      onError((e) => {
        setLoading(false)
        enqueueSnackbar('Error ocurred')
      })
      send({ type: 'create.task' })
    },
    [onMessage, onError, send, setLoading, enqueueSnackbar, terminal],
  )

  useEffect(() => {
    if (!listRef.current) {
      handleSocket('list')
      listRef.current = true
    }
  }, [handleSocket])

  return (
    <React.Fragment>
      <Collapse in={rowSelected === undefined}>
        <CustomTable
          data={data}
          columns={columns}
          onClickRow={({ rowData }) => {
            const typed: DataProps = rowData
            if (typed.name === 'screenshot') {
              handleSocket('execute', { id_module: typed.id_module })
              return
            }
            if (!typed.options_description || !typed.options_description.length) {
              enqueueSnackbar('Without options', { variant: 'error' })
              return false
            }
            setRowSelected(rowData)
          }}
        />
      </Collapse>
      <Collapse in={rowSelected !== undefined}>
        {fields.length && (
          <CenteredCard
            title={rowSelected?.name}
            subtitle="Please complete options to execute"
            onClose={() => setRowSelected(undefined)}>
            <Form
              isEditing
              showHelpIcon
              accept="Execute"
              fields={fields}
              onSubmit={(values) => {
                handleSocket('execute', {
                  id_module: rowSelected?.id_module!!,
                  options: { ports: values.ports, target: values.target },
                })
              }}
            />
          </CenteredCard>
        )}
      </Collapse>
    </React.Fragment>
  )
}

export default PostExploitation
